{"version":3,"sources":["data/getRandomWord.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["WORD","min","max","wordIndex","words","length","Math","floor","random","getRandomWord","App","useState","currentLetter","setCurrentLetter","previousLetters","setPreviousLetters","inputRef","useRef","unsponenValues","filter","letter","includes","remainingAttempts","currentValue","split","map","join","canEnterNewValue","console","log","useEffect","alert","current","focus","className","readOnly","value","placeholder","ref","disabled","onChange","event","target","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAMe,I,OCFTA,EDES,WACX,IAL2BC,EAAaC,EAKlCC,GALqBF,EAKa,EALAC,EAKGE,EAAMC,OAAS,EAJnDC,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,IAKpD,OAAOG,EAAMD,GCJJM,GAuFEC,MApFf,WAAgB,IAAD,EAC6BC,mBAAS,IADtC,mBACNC,EADM,KACSC,EADT,OAEiCF,mBAAmB,IAFpD,mBAENG,EAFM,KAEWC,EAFX,KAGPC,EAAWC,iBAAyB,MAEpCC,EACJJ,EACCK,QAAO,SAASC,GACf,OAAKpB,EAAKqB,SAASD,MAafE,GAPNR,EACCK,QAAO,SAASC,GACf,QAAKpB,EAAKqB,SAASD,MAlBE,GAuBwBF,EAAeb,QACxDkB,EACNvB,EACCwB,MAAM,IACNC,KAAI,SAASL,GACZ,OAAIN,EAAgBO,SAASD,GACpBA,EAGF,OAERM,KAAK,IACFC,EAAmBL,EAAoB,GAAKC,EAAaF,SAAS,KAoCxE,OAnCAO,QAAQC,IAAI7B,EAAMuB,EAAcD,EAAoB,EAAGC,EAAaF,SAAS,KAAMM,GAGnFG,qBAAU,WACJP,EAAaF,SAAS,MAAMU,MAAM,kEACnCT,GAAqB,GAAGS,MAAM,qKAAD,OAAoC/B,EAApC,MAC7BgB,EAASgB,SAAShB,EAASgB,QAAQC,UAErC,CAACnB,EAAgBT,SA4BlB,sBAAK6B,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,uBAAOA,UAAU,aAAjB,yIACA,uBAAOA,UAAU,oBAAoBC,UAAQ,EAACC,MAAOb,OAEvD,sBAAKW,UAAU,mBAAf,UACE,sBAAMA,UAAU,mBAAhB,oEAAgDZ,EAAhD,iDACA,uBAAOY,UAAU,eAAeG,YAAY,4EAAgBC,IAAKtB,EAAUuB,UAAWZ,EAAkBa,SAxB9G,SAA2BC,GACzBb,QAAQC,IAAI,SAAUY,EAAMC,OAAON,SAE/BxB,GAAkBA,IAAkB6B,EAAMC,OAAON,QACnDvB,EAAiB4B,EAAMC,OAAON,QAoByGA,MAAOxB,IAC5I,wBAAQsB,UAAU,4BAA4BS,KAAK,SAASJ,UAAWZ,EAAkBiB,QAlB/F,WAfA,IAA2BxB,EAgBzBQ,QAAQC,IAAI,QAASjB,GAEhBA,IAlBoBQ,EAoBPR,EAnBlBG,EAAmB,GAAD,mBAAKD,GAAL,CAAsBM,KAIxCP,EAAiB,MA4Bb,+DCvEOgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9928e3bf.chunk.js","sourcesContent":["import words from './words.json';\n\nfunction randomIntFromInterval(min: number, max: number){\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default function() {\n    const wordIndex = randomIntFromInterval(0, words.length - 1);\n    return words[wordIndex];\n}","import React, { useEffect, useRef, useState } from 'react';\nimport getRandomWord from '../data/getRandomWord';\nimport './App.css';\n\nconst WORD = getRandomWord();\nconst NUMBER_OF_ATTEMPTS = 15;\n\nfunction App() {\n  const [currentLetter, setCurrentLetter] = useState('');\n  const [previousLetters, setPreviousLetters] = useState<string[]>([]);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const unsponenValues =\n    previousLetters\n    .filter(function(letter) {\n      if (!WORD.includes(letter)) {\n        return true;\n      }\n      return false;\n    });\n  const guessedValues =\n    previousLetters\n    .filter(function(letter) {\n      if (!WORD.includes(letter)) {\n        return false;\n      }\n      return true;\n    });\n    const remainingAttempts = NUMBER_OF_ATTEMPTS - unsponenValues.length;\n    const currentValue =\n    WORD\n    .split('')\n    .map(function(letter) {\n      if (previousLetters.includes(letter)) {\n        return letter;\n      }\n\n      return '-';\n    })\n    .join('');\n  const canEnterNewValue = remainingAttempts > 0 && currentValue.includes(\"-\");\n  console.log(WORD, currentValue, remainingAttempts > 0, currentValue.includes(\"-\"), canEnterNewValue)\n\n\n  useEffect(function() {\n    if(!currentValue.includes(\"-\")) alert('Вы победили!');\n    if(remainingAttempts <= 0) alert(`Вы проиграли! Правильное слово \"${WORD}\"`);\n    if(inputRef.current) inputRef.current.focus()\n\n  }, [previousLetters.length])\n\n\n  function addPreviousLetter(letter: string) {\n    setPreviousLetters([...previousLetters, letter])\n  }\n\n  function resetCurrentLetter() {\n    setCurrentLetter('')\n  }\n\n  function handleChangeInput(event: React.ChangeEvent<HTMLInputElement>) {\n    console.log('change', event.target.value)\n\n    if(!currentLetter || (currentLetter && !event.target.value)) {\n      setCurrentLetter(event.target.value);\n    }\n  }\n  function handleClickButton() {\n    console.log('click', currentLetter);\n\n    if (!currentLetter) return;\n\n    addPreviousLetter(currentLetter);\n    resetCurrentLetter()\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"mb-3\">\n        <label className=\"form-label\">При ошибке теряешь очко</label>\n        <input className=\"form-control word\" readOnly value={currentValue} />\n      </div>\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text\">{`Осталось ${remainingAttempts} попыток`}</span>\n        <input className=\"form-control\" placeholder=\"Введите букву\" ref={inputRef} disabled={!canEnterNewValue} onChange={handleChangeInput} value={currentLetter} />\n        <button className=\"btn btn-outline-secondary\" type=\"button\" disabled={!canEnterNewValue} onClick={handleClickButton}>Угадать</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}